import java.util.LinkedList;
import java.util.List;
import java.util.Random;

public class StoreDWJF {
	/** all the orders in total at the store */
	public List<ProductDWJF> orderHistory = new LinkedList<ProductDWJF>();
	/** all the possible menu items */
	public List<ProductDWJF> menu = new LinkedList<ProductDWJF>();
	/** the amount of money the store has made */
	public double bank;
	/** Overhead costs */

	/** Hardware */
	public List<HardwareDWJF> tools = new LinkedList<HardwareDWJF>();

	/** Hardware costs*/
	public double hcosts;
	/** Employee */
	public List<EmployeeDWJF> staff = new LinkedList<EmployeeDWJF>();
	//the total costs of employees
	public double ecosts;

	/**
	 * Constructor for store
	 * adds all the menu items
	 * @param bank amount of $$ the starbucks starts with.
	 */
	public StoreDWJF(double bank) {
		//set bank
		this.bank = bank;
		//products
		//hot chai
		List<Double> price1 = new LinkedList<Double>();
		price1.add((double) 3.15);
		price1.add((double) 3.65);
		price1.add((double) 3.95);
		List<Double> cost1 = new LinkedList<Double>();
		cost1.add((double) .6);
		cost1.add((double) 1);
		cost1.add((double) 1.2);
		this.menu.add(new ProductDWJF("Hot Chai", price1, cost1)); //add hot chai to menu
		//iced chai
		List<Double> price2 = new LinkedList<Double>();
		price2.add((double) 2.90);
		price2.add((double) 3.40);
		price2.add((double) 3.75);
		List<Double> cost2 = new LinkedList<Double>();
		cost2.add((double) .5);
		cost2.add((double) .8);
		cost2.add((double) 1);
		this.menu.add(new ProductDWJF("Iced Chai", price2, cost2)); //add iced chai to menu
		//hot coffee
		List<Double> price3 = new LinkedList<Double>();
		price3.add((double) 2.95);
		price3.add((double) 3.65);
		price3.add((double) 4.00);
		List<Double> cost3 = new LinkedList<Double>();
		cost3.add((double) 0.4);
		cost3.add((double) 0.7);
		cost3.add((double) .9);
		this.menu.add(new ProductDWJF("Hot Coffee", price3, cost3)); // add hot coffee to menu
		//Iced coffee
		List<Double> price4 = new LinkedList<Double>();
		price4.add((double) 3.15);
		price4.add((double) 3.80);
		price4.add((double) 4.25);
		List<Double> cost4 = new LinkedList<Double>();
		cost4.add((double) 0.5);
		cost4.add((double) 0.8);
		cost4.add((double) 1);
		this.menu.add(new ProductDWJF("Iced Coffee", price4, cost4)); //add iced coffee to menu
		//Pumpkin Spiced Latte
		List<Double> price5 = new LinkedList<Double>();
		price5.add((double) 3.85);
		price5.add((double) 4.35);
		price5.add((double) 4.65);
		List<Double> cost5 = new LinkedList<Double>();
		cost5.add((double) .7);
		cost5.add((double) 1.1);
		cost5.add((double) 1.3);
		this.menu.add(new ProductDWJF("Pumpkin Spiced Latte", price5, cost5)); //add pumpkin spiced latte to menu
		//Peppermint Latte
		List<Double> price6 = new LinkedList<Double>();
		price6.add((double) 3.55);
		price6.add((double) 4.25);
		price6.add((double) 4.45);
		List<Double> cost6 = new LinkedList<Double>();
		cost6.add((double) .7);
		cost6.add((double) 1.);
		cost6.add((double) 1.2);
		this.menu.add(new ProductDWJF("Peppermint Latte", price6, cost6)); //add peppermint latte to menu

		//hardware
		// declaring coffee grinder
		this.tools.add(new HardwareDWJF("Coffee Grinder", 1000 , 20000, 20000)); //coffee grinder
		// declaring clover
		this.tools.add(new HardwareDWJF("Clover", 455, 20000, 20000)); //clover
		// declaring Milk Foamer
		this.tools.add(new HardwareDWJF("Milk Foamer", 100, 15000, 15000)); //milk foamer
		// declaring Sugar
		this.tools.add(new HardwareDWJF("Sugar", 100, 1000, 1000)); //sugar
		// declaring stirrers
		this.tools.add(new HardwareDWJF("Stirrers", 50, 1000, 1000)); //stirrers
		// declaring Straws
		this.tools.add(new HardwareDWJF("Straws", 100, 1000, 1000)); //straws
		// declaring Uniforms
		this.tools.add(new HardwareDWJF("Uniforms", 100, 5, 5)); //uniforms

		// employees:
		this.staff.add(new EmployeeDWJF("Cashier", 300, 100, 0, 5));
		this.staff.add(new EmployeeDWJF("Burista", 400, 120, 0, 5));
		this.staff.add(new EmployeeDWJF("Manager", 500, 150, 0, 1));

	}

	/**
	 * take the product and process the order
	 * @param rounds 
	 */
	public void processOrder(int p, int s) {
		//This whole hardware section deals with hardware costs of processing an order
		HardwareDWJF cg = tools.get(0);
		if(cg.usage==cg.usageLimit){
			this.bank -= cg.cost;
			cg.usage = 0;
			this.hcosts += cg.cost;
		}
		HardwareDWJF cl = tools.get(1);
		if(cl.usage==cl.usageLimit){
			this.bank -= cl.cost;
			cl.usage = 0;
			this.hcosts += cl.cost;
		}
		HardwareDWJF mf = tools.get(2);
		if(mf.usage==mf.usageLimit){
			this.bank -= mf.cost;
			mf.usage = 0;
			this.hcosts += mf.cost;
		}
		HardwareDWJF sugar = tools.get(3);
		if(sugar.usage==sugar.usageLimit){
			this.bank -= sugar.cost;
			sugar.usage = 0;
			this.hcosts += sugar.cost;
		}
		HardwareDWJF stirrers = tools.get(4);
		if(stirrers.usage==stirrers.usageLimit){
			this.bank -= stirrers.cost;
			stirrers.usage = 0;
			this.hcosts += stirrers.cost;
		}
		HardwareDWJF straws = tools.get(5);
		if(straws.usage==straws.usageLimit){
			this.bank -= straws.cost;
			straws.usage = 0;
			this.hcosts += straws.cost;
		}
		HardwareDWJF uni = tools.get(6);
		if(uni.usage==uni.usageLimit){
			this.bank -= uni.cost;
			uni.usage = 0;
			this.hcosts += uni.cost;
		}
		//hires employees if there is not any
		EmployeeDWJF ca = staff.get(0);
		if(ca.employed == 0)
		{
			this.bank -= ca.tohire;
			ca.employed++;
			this.ecosts += ca.tohire;
		}
		EmployeeDWJF bu = staff.get(1);
		if(bu.employed == 0)
		{
			this.bank -= bu.tohire;
			bu.employed++;
			this.ecosts += bu.tohire;
		}
		EmployeeDWJF ma = staff.get(2);
		if(ma.employed == 0)
		{
			this.bank -= ma.tohire;
			ma.employed++;
			this.ecosts += ma.tohire;
		}
		ProductDWJF tempProd = menu.get(p);
		//   	 add money to the bank
		bank = ((tempProd.price.get(s)) - tempProd.cost.get(s)) + bank; //also multiplies by the buristas employed because we do 2 times as much.
		//   	 add usage to according hardware
		if(tempProd.name.equalsIgnoreCase("caramel mocha macchioto frappichino")||tempProd.name.equalsIgnoreCase("Coffee")){
			cg.usage ++;
			cl.usage ++;
			mf.usage ++;
		}
		if(tempProd.name.equalsIgnoreCase("caramel mocha macchioto frappichino")){
			straws.usage ++;

		}
		if(this.bank > 25000 && ca.employed <= 2){ //adds a burista and a cashier
			ca.employed++;
			bu.employed++;
		}
		if(this.bank > 50000 && ca.employed <= 3){ //adds a burista and a cashier
			ca.employed++;
			bu.employed++;
		}
		Random gen = new Random();
		if(gen.nextInt(3)==0){
			stirrers.usage++;
			straws.usage++;
		}
	}
	//returns the total revenue, total amount of money used to pay for hardware and the total amount paid on employees
	public String toString() {
		return "Store has made $" + (Math.round(bank)) + " and has spent $" + hcosts + " on hardware" + " We spent $" + ecosts + " to pay our employees ";
	}
	//determines amount of customers for a day based on the amount of baristas
	//(basically the amount of people the barista can efficiently serve)
	public int customerAmount(){
		int amount;
		Random gen = new Random();
		amount = 350+gen.nextInt(200)*staff.get(1).employed;
		return amount;
	}
	//monthly rent
	public void rent(){
		int rentcost = 25000;
		this.bank -= rentcost;
	}
	//paying the employees
	public void dailyMaintanace(){
		this.bank -= staff.get(0).daily*staff.get(0).employed;
		this.bank -= staff.get(1).daily*staff.get(1).employed;
		this.bank -= staff.get(2).daily*staff.get(2).employed;
		ecosts += staff.get(0).daily*staff.get(0).employed;
		ecosts += staff.get(1).daily*staff.get(1).employed;
		ecosts += staff.get(2).daily*staff.get(2).employed;
	}
}
